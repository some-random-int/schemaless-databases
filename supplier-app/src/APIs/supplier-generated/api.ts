/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Supplier API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: simon.huesch@smail.inf.h-brs.de
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:5002".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ItemModel
 */
export interface ItemModel {
    /**
     * 
     * @type {string}
     * @memberof ItemModel
     */
    _key: string;
    /**
     * 
     * @type {string}
     * @memberof ItemModel
     */
    itemType?: ItemModel.ItemTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ItemModel
     */
    unitCost?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemModel
     */
    unitPrice?: number;
}

/**
 * @export
 * @namespace ItemModel
 */
export namespace ItemModel {
    /**
     * @export
     * @enum {string}
     */
    export enum ItemTypeEnum {
        OfficeSupplies = <any> 'Office Supplies',
        Vegetables = <any> 'Vegetables',
        BabyFood = <any> 'Baby Food',
        Cosmetics = <any> 'Cosmetics',
        PersonalCare = <any> 'Personal Care',
        Meat = <any> 'Meat',
        Snacks = <any> 'Snacks',
        Household = <any> 'Household',
        Beverages = <any> 'Beverages',
        Fruits = <any> 'Fruits',
        Clothes = <any> 'Clothes',
        Cereal = <any> 'Cereal'
    }
}
/**
 * 
 * @export
 * @interface SupplierModel
 */
export interface SupplierModel {
    /**
     * 
     * @type {string}
     * @memberof SupplierModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SupplierModel
     */
    _key: string;
    /**
     * 
     * @type {string}
     * @memberof SupplierModel
     */
    country?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupplierModel
     */
    itemList?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SupplierModel
     */
    region?: string;
}
/**
 * ItemApi - fetch parameter creator
 * @export
 */
export const ItemApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDDelete(itemID: string, options: any = {}): FetchArgs {
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling itemItemIDDelete.');
            }
            const localVarPath = `/item/{ItemID}`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDGet(itemID: string, options: any = {}): FetchArgs {
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling itemItemIDGet.');
            }
            const localVarPath = `/item/{ItemID}`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders of a given item
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDOrdersGet(itemID: string, options: any = {}): FetchArgs {
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling itemItemIDOrdersGet.');
            }
            const localVarPath = `/item/{ItemID}/orders`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Item by its ID
         * @param {string} itemID ItemID
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDPut(itemID: string, body?: ItemModel, options: any = {}): FetchArgs {
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling itemItemIDPut.');
            }
            const localVarPath = `/item/{ItemID}`
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ItemModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the given Item to the collection
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPost(body?: ItemModel, options: any = {}): FetchArgs {
            const localVarPath = `/item`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ItemModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDDelete(itemID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemModel> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemItemIDDelete(itemID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDGet(itemID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemModel> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemItemIDGet(itemID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all orders of a given item
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDOrdersGet(itemID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemModel> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemItemIDOrdersGet(itemID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an Item by its ID
         * @param {string} itemID ItemID
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDPut(itemID: string, body?: ItemModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemModel> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemItemIDPut(itemID, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add the given Item to the collection
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPost(body?: ItemModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ItemModel> {
            const localVarFetchArgs = ItemApiFetchParamCreator(configuration).itemPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDDelete(itemID: string, options?: any) {
            return ItemApiFp(configuration).itemItemIDDelete(itemID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get an Item by its ID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDGet(itemID: string, options?: any) {
            return ItemApiFp(configuration).itemItemIDGet(itemID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all orders of a given item
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDOrdersGet(itemID: string, options?: any) {
            return ItemApiFp(configuration).itemItemIDOrdersGet(itemID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an Item by its ID
         * @param {string} itemID ItemID
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemItemIDPut(itemID: string, body?: ItemModel, options?: any) {
            return ItemApiFp(configuration).itemItemIDPut(itemID, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add the given Item to the collection
         * @param {ItemModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPost(body?: ItemModel, options?: any) {
            return ItemApiFp(configuration).itemPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @summary Delete an Item by its ID
     * @param {string} itemID ItemID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemItemIDDelete(itemID: string, options?: any) {
        return ItemApiFp(this.configuration).itemItemIDDelete(itemID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get an Item by its ID
     * @param {string} itemID ItemID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemItemIDGet(itemID: string, options?: any) {
        return ItemApiFp(this.configuration).itemItemIDGet(itemID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all orders of a given item
     * @param {string} itemID ItemID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemItemIDOrdersGet(itemID: string, options?: any) {
        return ItemApiFp(this.configuration).itemItemIDOrdersGet(itemID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an Item by its ID
     * @param {string} itemID ItemID
     * @param {ItemModel} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemItemIDPut(itemID: string, body?: ItemModel, options?: any) {
        return ItemApiFp(this.configuration).itemItemIDPut(itemID, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add the given Item to the collection
     * @param {ItemModel} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemPost(body?: ItemModel, options?: any) {
        return ItemApiFp(this.configuration).itemPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * SupplierApi - fetch parameter creator
 * @export
 */
export const SupplierApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add the given Supplier to the collection
         * @param {SupplierModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierPost(body?: SupplierModel, options: any = {}): FetchArgs {
            const localVarPath = `/supplier`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SupplierModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDGet(supplierID: string, options: any = {}): FetchArgs {
            // verify required parameter 'supplierID' is not null or undefined
            if (supplierID === null || supplierID === undefined) {
                throw new RequiredError('supplierID','Required parameter supplierID was null or undefined when calling supplierSupplierIDGet.');
            }
            const localVarPath = `/supplier/{SupplierID}`
                .replace(`{${"SupplierID"}}`, encodeURIComponent(String(supplierID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDPut(supplierID: string, body: SupplierModel, options: any = {}): FetchArgs {
            // verify required parameter 'supplierID' is not null or undefined
            if (supplierID === null || supplierID === undefined) {
                throw new RequiredError('supplierID','Required parameter supplierID was null or undefined when calling supplierSupplierIDPut.');
            }
            const localVarPath = `/supplier/{SupplierID}`
                .replace(`{${"SupplierID"}}`, encodeURIComponent(String(supplierID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SupplierModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove the given ItemID from the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDDelete(supplierID: string, itemID: string, options: any = {}): FetchArgs {
            // verify required parameter 'supplierID' is not null or undefined
            if (supplierID === null || supplierID === undefined) {
                throw new RequiredError('supplierID','Required parameter supplierID was null or undefined when calling supplierSupplierIDSuppliesItemIDDelete.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling supplierSupplierIDSuppliesItemIDDelete.');
            }
            const localVarPath = `/supplier/{SupplierID}/supplies/{ItemID}`
                .replace(`{${"SupplierID"}}`, encodeURIComponent(String(supplierID)))
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add the given ItemID to the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDPut(supplierID: string, itemID: string, options: any = {}): FetchArgs {
            // verify required parameter 'supplierID' is not null or undefined
            if (supplierID === null || supplierID === undefined) {
                throw new RequiredError('supplierID','Required parameter supplierID was null or undefined when calling supplierSupplierIDSuppliesItemIDPut.');
            }
            // verify required parameter 'itemID' is not null or undefined
            if (itemID === null || itemID === undefined) {
                throw new RequiredError('itemID','Required parameter itemID was null or undefined when calling supplierSupplierIDSuppliesItemIDPut.');
            }
            const localVarPath = `/supplier/{SupplierID}/supplies/{ItemID}`
                .replace(`{${"SupplierID"}}`, encodeURIComponent(String(supplierID)))
                .replace(`{${"ItemID"}}`, encodeURIComponent(String(itemID)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupplierApi - functional programming interface
 * @export
 */
export const SupplierApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add the given Supplier to the collection
         * @param {SupplierModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierPost(body?: SupplierModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SupplierModel> {
            const localVarFetchArgs = SupplierApiFetchParamCreator(configuration).supplierPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDGet(supplierID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SupplierModel> {
            const localVarFetchArgs = SupplierApiFetchParamCreator(configuration).supplierSupplierIDGet(supplierID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update an Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDPut(supplierID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SupplierModel> {
            const localVarFetchArgs = SupplierApiFetchParamCreator(configuration).supplierSupplierIDPut(supplierID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove the given ItemID from the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDDelete(supplierID: string, itemID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SupplierModel> {
            const localVarFetchArgs = SupplierApiFetchParamCreator(configuration).supplierSupplierIDSuppliesItemIDDelete(supplierID, itemID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Add the given ItemID to the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDPut(supplierID: string, itemID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SupplierModel> {
            const localVarFetchArgs = SupplierApiFetchParamCreator(configuration).supplierSupplierIDSuppliesItemIDPut(supplierID, itemID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SupplierApi - factory interface
 * @export
 */
export const SupplierApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add the given Supplier to the collection
         * @param {SupplierModel} [body] Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierPost(body?: SupplierModel, options?: any) {
            return SupplierApiFp(configuration).supplierPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDGet(supplierID: string, options?: any) {
            return SupplierApiFp(configuration).supplierSupplierIDGet(supplierID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update an Supplier by its ID
         * @param {string} supplierID SupplierID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDPut(supplierID: string, options?: any) {
            return SupplierApiFp(configuration).supplierSupplierIDPut(supplierID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove the given ItemID from the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDDelete(supplierID: string, itemID: string, options?: any) {
            return SupplierApiFp(configuration).supplierSupplierIDSuppliesItemIDDelete(supplierID, itemID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Add the given ItemID to the item list of the given Supplier
         * @param {string} supplierID SupplierID
         * @param {string} itemID ItemID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplierSupplierIDSuppliesItemIDPut(supplierID: string, itemID: string, options?: any) {
            return SupplierApiFp(configuration).supplierSupplierIDSuppliesItemIDPut(supplierID, itemID, options)(fetch, basePath);
        },
    };
};

/**
 * SupplierApi - object-oriented interface
 * @export
 * @class SupplierApi
 * @extends {BaseAPI}
 */
export class SupplierApi extends BaseAPI {
    /**
     * 
     * @summary Add the given Supplier to the collection
     * @param {SupplierModel} [body] Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public supplierPost(body?: SupplierModel, options?: any) {
        return SupplierApiFp(this.configuration).supplierPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a Supplier by its ID
     * @param {string} supplierID SupplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public supplierSupplierIDGet(supplierID: string, options?: any) {
        return SupplierApiFp(this.configuration).supplierSupplierIDGet(supplierID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update an Supplier by its ID
     * @param {string} supplierID SupplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public supplierSupplierIDPut(supplierID: string, options?: any) {
        return SupplierApiFp(this.configuration).supplierSupplierIDPut(supplierID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove the given ItemID from the item list of the given Supplier
     * @param {string} supplierID SupplierID
     * @param {string} itemID ItemID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public supplierSupplierIDSuppliesItemIDDelete(supplierID: string, itemID: string, options?: any) {
        return SupplierApiFp(this.configuration).supplierSupplierIDSuppliesItemIDDelete(supplierID, itemID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Add the given ItemID to the item list of the given Supplier
     * @param {string} supplierID SupplierID
     * @param {string} itemID ItemID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplierApi
     */
    public supplierSupplierIDSuppliesItemIDPut(supplierID: string, itemID: string, options?: any) {
        return SupplierApiFp(this.configuration).supplierSupplierIDSuppliesItemIDPut(supplierID, itemID, options)(this.fetch, this.basePath);
    }

}
